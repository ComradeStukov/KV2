#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Compile(object):
    """
    Attributes:
     - source
     - command
     - timeout

    """


    def __init__(self, source=None, command=None, timeout=None,):
        self.source = source
        self.command = command
        self.timeout = timeout

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.source = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.command = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Compile')
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 1)
            oprot.writeBinary(self.source)
            oprot.writeFieldEnd()
        if self.command is not None:
            oprot.writeFieldBegin('command', TType.STRING, 2)
            oprot.writeBinary(self.command)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 3)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Execute(object):
    """
    Attributes:
     - source
     - command
     - timeout
     - standard

    """


    def __init__(self, source=None, command=None, timeout=None, standard=None,):
        self.source = source
        self.command = command
        self.timeout = timeout
        self.standard = standard

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.source = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.command = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.standard = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Execute')
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 1)
            oprot.writeBinary(self.source)
            oprot.writeFieldEnd()
        if self.command is not None:
            oprot.writeFieldBegin('command', TType.STRING, 2)
            oprot.writeBinary(self.command)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 3)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        if self.standard is not None:
            oprot.writeFieldBegin('standard', TType.STRING, 4)
            oprot.writeBinary(self.standard)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Result(object):
    """
    Attributes:
     - compile
     - execute

    """


    def __init__(self, compile=None, execute=None,):
        self.compile = compile
        self.execute = execute

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.compile = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.execute = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Result')
        if self.compile is not None:
            oprot.writeFieldBegin('compile', TType.STRING, 1)
            oprot.writeBinary(self.compile)
            oprot.writeFieldEnd()
        if self.execute is not None:
            oprot.writeFieldBegin('execute', TType.STRING, 2)
            oprot.writeBinary(self.execute)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Task(object):
    """
    Attributes:
     - id
     - user
     - compile
     - execute
     - done
     - status
     - executor
     - report_time
     - result

    """


    def __init__(self, id=None, user=None, compile=None, execute=None, done=None, status=None, executor=None, report_time=None, result=None,):
        self.id = id
        self.user = user
        self.compile = compile
        self.execute = execute
        self.done = done
        self.status = status
        self.executor = executor
        self.report_time = report_time
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.compile = Compile()
                    self.compile.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.execute = Execute()
                    self.execute.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.done = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.executor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.report_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.result = Result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Task')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.I32, 2)
            oprot.writeI32(self.user)
            oprot.writeFieldEnd()
        if self.compile is not None:
            oprot.writeFieldBegin('compile', TType.STRUCT, 3)
            self.compile.write(oprot)
            oprot.writeFieldEnd()
        if self.execute is not None:
            oprot.writeFieldBegin('execute', TType.STRUCT, 4)
            self.execute.write(oprot)
            oprot.writeFieldEnd()
        if self.done is not None:
            oprot.writeFieldBegin('done', TType.BOOL, 5)
            oprot.writeBool(self.done)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.executor is not None:
            oprot.writeFieldBegin('executor', TType.STRING, 7)
            oprot.writeString(self.executor.encode('utf-8') if sys.version_info[0] == 2 else self.executor)
            oprot.writeFieldEnd()
        if self.report_time is not None:
            oprot.writeFieldBegin('report_time', TType.STRING, 8)
            oprot.writeString(self.report_time.encode('utf-8') if sys.version_info[0] == 2 else self.report_time)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 9)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TaskBrief(object):
    """
    Attributes:
     - id
     - user
     - done
     - status
     - executor
     - report_time

    """


    def __init__(self, id=None, user=None, done=None, status=None, executor=None, report_time=None,):
        self.id = id
        self.user = user
        self.done = done
        self.status = status
        self.executor = executor
        self.report_time = report_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.done = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.executor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.report_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TaskBrief')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.I32, 2)
            oprot.writeI32(self.user)
            oprot.writeFieldEnd()
        if self.done is not None:
            oprot.writeFieldBegin('done', TType.BOOL, 3)
            oprot.writeBool(self.done)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.executor is not None:
            oprot.writeFieldBegin('executor', TType.STRING, 5)
            oprot.writeString(self.executor.encode('utf-8') if sys.version_info[0] == 2 else self.executor)
            oprot.writeFieldEnd()
        if self.report_time is not None:
            oprot.writeFieldBegin('report_time', TType.STRING, 6)
            oprot.writeString(self.report_time.encode('utf-8') if sys.version_info[0] == 2 else self.report_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Executor(object):
    """
    Attributes:
     - id
     - hostname
     - report_time

    """


    def __init__(self, id=None, hostname=None, report_time=None,):
        self.id = id
        self.hostname = hostname
        self.report_time = report_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.report_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Executor')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.hostname is not None:
            oprot.writeFieldBegin('hostname', TType.STRING, 2)
            oprot.writeString(self.hostname.encode('utf-8') if sys.version_info[0] == 2 else self.hostname)
            oprot.writeFieldEnd()
        if self.report_time is not None:
            oprot.writeFieldBegin('report_time', TType.STRING, 3)
            oprot.writeString(self.report_time.encode('utf-8') if sys.version_info[0] == 2 else self.report_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NormalReturn(object):
    """
    Attributes:
     - result
     - notice

    """


    def __init__(self, result=None, notice=None,):
        self.result = result
        self.notice = notice

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.notice = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NormalReturn')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 1)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.notice is not None:
            oprot.writeFieldBegin('notice', TType.STRING, 2)
            oprot.writeString(self.notice.encode('utf-8') if sys.version_info[0] == 2 else self.notice)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoLists(object):
    """
    Attributes:
     - brief
     - full

    """


    def __init__(self, brief=None, full=None,):
        self.brief = brief
        self.full = full

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.brief = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = TaskBrief()
                        _elem5.read(iprot)
                        self.brief.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.full = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Task()
                        _elem11.read(iprot)
                        self.full.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoLists')
        if self.brief is not None:
            oprot.writeFieldBegin('brief', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.brief))
            for iter12 in self.brief:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.full is not None:
            oprot.writeFieldBegin('full', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.full))
            for iter13 in self.full:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Compile)
Compile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'source', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'command', 'BINARY', None, ),  # 2
    (3, TType.I32, 'timeout', None, None, ),  # 3
)
all_structs.append(Execute)
Execute.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'source', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'command', 'BINARY', None, ),  # 2
    (3, TType.I32, 'timeout', None, None, ),  # 3
    (4, TType.STRING, 'standard', 'BINARY', None, ),  # 4
)
all_structs.append(Result)
Result.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'compile', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'execute', 'BINARY', None, ),  # 2
)
all_structs.append(Task)
Task.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user', None, None, ),  # 2
    (3, TType.STRUCT, 'compile', [Compile, None], None, ),  # 3
    (4, TType.STRUCT, 'execute', [Execute, None], None, ),  # 4
    (5, TType.BOOL, 'done', None, None, ),  # 5
    (6, TType.I32, 'status', None, None, ),  # 6
    (7, TType.STRING, 'executor', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'report_time', 'UTF8', None, ),  # 8
    (9, TType.STRUCT, 'result', [Result, None], None, ),  # 9
)
all_structs.append(TaskBrief)
TaskBrief.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user', None, None, ),  # 2
    (3, TType.BOOL, 'done', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
    (5, TType.STRING, 'executor', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'report_time', 'UTF8', None, ),  # 6
)
all_structs.append(Executor)
Executor.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hostname', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'report_time', 'UTF8', None, ),  # 3
)
all_structs.append(NormalReturn)
NormalReturn.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'result', None, None, ),  # 1
    (2, TType.STRING, 'notice', 'UTF8', None, ),  # 2
)
all_structs.append(TwoLists)
TwoLists.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'brief', (TType.STRUCT, [TaskBrief, None], False), None, ),  # 1
    (2, TType.LIST, 'full', (TType.STRUCT, [Task, None], False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
