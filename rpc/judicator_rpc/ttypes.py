#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ReturnCode(object):
    OK = 0
    ERROR = 1
    NOT_EXIST = 2

    _VALUES_TO_NAMES = {
        0: "OK",
        1: "ERROR",
        2: "NOT_EXIST",
    }

    _NAMES_TO_VALUES = {
        "OK": 0,
        "ERROR": 1,
        "NOT_EXIST": 2,
    }


class Compile(object):
    """
    Attributes:
     - source
     - command
     - timeout

    """


    def __init__(self, source=None, command=None, timeout=None,):
        self.source = source
        self.command = command
        self.timeout = timeout

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.source = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.command = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Compile')
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 1)
            oprot.writeBinary(self.source)
            oprot.writeFieldEnd()
        if self.command is not None:
            oprot.writeFieldBegin('command', TType.STRING, 2)
            oprot.writeBinary(self.command)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 3)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Execute(object):
    """
    Attributes:
     - input
     - data
     - command
     - timeout
     - standard

    """


    def __init__(self, input=None, data=None, command=None, timeout=None, standard=None,):
        self.input = input
        self.data = data
        self.command = command
        self.timeout = timeout
        self.standard = standard

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.input = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.command = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.standard = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Execute')
        if self.input is not None:
            oprot.writeFieldBegin('input', TType.STRING, 1)
            oprot.writeBinary(self.input)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 2)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        if self.command is not None:
            oprot.writeFieldBegin('command', TType.STRING, 3)
            oprot.writeBinary(self.command)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 4)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        if self.standard is not None:
            oprot.writeFieldBegin('standard', TType.STRING, 5)
            oprot.writeBinary(self.standard)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Result(object):
    """
    Attributes:
     - compile_output
     - compile_error
     - execute_output
     - execute_error

    """


    def __init__(self, compile_output=None, compile_error=None, execute_output=None, execute_error=None,):
        self.compile_output = compile_output
        self.compile_error = compile_error
        self.execute_output = execute_output
        self.execute_error = execute_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.compile_output = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.compile_error = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.execute_output = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.execute_error = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Result')
        if self.compile_output is not None:
            oprot.writeFieldBegin('compile_output', TType.STRING, 1)
            oprot.writeBinary(self.compile_output)
            oprot.writeFieldEnd()
        if self.compile_error is not None:
            oprot.writeFieldBegin('compile_error', TType.STRING, 2)
            oprot.writeBinary(self.compile_error)
            oprot.writeFieldEnd()
        if self.execute_output is not None:
            oprot.writeFieldBegin('execute_output', TType.STRING, 3)
            oprot.writeBinary(self.execute_output)
            oprot.writeFieldEnd()
        if self.execute_error is not None:
            oprot.writeFieldBegin('execute_error', TType.STRING, 4)
            oprot.writeBinary(self.execute_error)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Task(object):
    """
    Attributes:
     - id
     - user
     - compile
     - execute
     - add_time
     - done
     - status
     - executor
     - report_time
     - result

    """


    def __init__(self, id=None, user=None, compile=None, execute=None, add_time=None, done=None, status=None, executor=None, report_time=None, result=None,):
        self.id = id
        self.user = user
        self.compile = compile
        self.execute = execute
        self.add_time = add_time
        self.done = done
        self.status = status
        self.executor = executor
        self.report_time = report_time
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.compile = Compile()
                    self.compile.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.execute = Execute()
                    self.execute.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.add_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.done = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.executor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.report_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.result = Result()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Task')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.I32, 2)
            oprot.writeI32(self.user)
            oprot.writeFieldEnd()
        if self.compile is not None:
            oprot.writeFieldBegin('compile', TType.STRUCT, 3)
            self.compile.write(oprot)
            oprot.writeFieldEnd()
        if self.execute is not None:
            oprot.writeFieldBegin('execute', TType.STRUCT, 4)
            self.execute.write(oprot)
            oprot.writeFieldEnd()
        if self.add_time is not None:
            oprot.writeFieldBegin('add_time', TType.STRING, 5)
            oprot.writeString(self.add_time.encode('utf-8') if sys.version_info[0] == 2 else self.add_time)
            oprot.writeFieldEnd()
        if self.done is not None:
            oprot.writeFieldBegin('done', TType.BOOL, 6)
            oprot.writeBool(self.done)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 7)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.executor is not None:
            oprot.writeFieldBegin('executor', TType.STRING, 8)
            oprot.writeString(self.executor.encode('utf-8') if sys.version_info[0] == 2 else self.executor)
            oprot.writeFieldEnd()
        if self.report_time is not None:
            oprot.writeFieldBegin('report_time', TType.STRING, 9)
            oprot.writeString(self.report_time.encode('utf-8') if sys.version_info[0] == 2 else self.report_time)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 10)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TaskBrief(object):
    """
    Attributes:
     - id
     - user
     - add_time
     - done
     - status
     - executor
     - report_time

    """


    def __init__(self, id=None, user=None, add_time=None, done=None, status=None, executor=None, report_time=None,):
        self.id = id
        self.user = user
        self.add_time = add_time
        self.done = done
        self.status = status
        self.executor = executor
        self.report_time = report_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.add_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.done = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.executor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.report_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TaskBrief')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.I32, 2)
            oprot.writeI32(self.user)
            oprot.writeFieldEnd()
        if self.add_time is not None:
            oprot.writeFieldBegin('add_time', TType.STRING, 3)
            oprot.writeString(self.add_time.encode('utf-8') if sys.version_info[0] == 2 else self.add_time)
            oprot.writeFieldEnd()
        if self.done is not None:
            oprot.writeFieldBegin('done', TType.BOOL, 4)
            oprot.writeBool(self.done)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 5)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.executor is not None:
            oprot.writeFieldBegin('executor', TType.STRING, 6)
            oprot.writeString(self.executor.encode('utf-8') if sys.version_info[0] == 2 else self.executor)
            oprot.writeFieldEnd()
        if self.report_time is not None:
            oprot.writeFieldBegin('report_time', TType.STRING, 7)
            oprot.writeString(self.report_time.encode('utf-8') if sys.version_info[0] == 2 else self.report_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Executor(object):
    """
    Attributes:
     - id
     - hostname
     - report_time

    """


    def __init__(self, id=None, hostname=None, report_time=None,):
        self.id = id
        self.hostname = hostname
        self.report_time = report_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.report_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Executor')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.hostname is not None:
            oprot.writeFieldBegin('hostname', TType.STRING, 2)
            oprot.writeString(self.hostname.encode('utf-8') if sys.version_info[0] == 2 else self.hostname)
            oprot.writeFieldEnd()
        if self.report_time is not None:
            oprot.writeFieldBegin('report_time', TType.STRING, 3)
            oprot.writeString(self.report_time.encode('utf-8') if sys.version_info[0] == 2 else self.report_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddReturn(object):
    """
    Attributes:
     - result
     - id

    """


    def __init__(self, result=None, id=None,):
        self.result = result
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddReturn')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SearchReturn(object):
    """
    Attributes:
     - result
     - pages
     - tasks

    """


    def __init__(self, result=None, pages=None, tasks=None,):
        self.result = result
        self.pages = pages
        self.tasks = tasks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pages = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.tasks = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = TaskBrief()
                        _elem5.read(iprot)
                        self.tasks.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SearchReturn')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.pages is not None:
            oprot.writeFieldBegin('pages', TType.I32, 2)
            oprot.writeI32(self.pages)
            oprot.writeFieldEnd()
        if self.tasks is not None:
            oprot.writeFieldBegin('tasks', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.tasks))
            for iter6 in self.tasks:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetReturn(object):
    """
    Attributes:
     - result
     - task

    """


    def __init__(self, result=None, task=None,):
        self.result = result
        self.task = task

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.task = Task()
                    self.task.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetReturn')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.task is not None:
            oprot.writeFieldBegin('task', TType.STRUCT, 2)
            self.task.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReportReturn(object):
    """
    Attributes:
     - result
     - cancel
     - assign

    """


    def __init__(self, result=None, cancel=None, assign=None,):
        self.result = result
        self.cancel = cancel
        self.assign = assign

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.cancel = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = TaskBrief()
                        _elem12.read(iprot)
                        self.cancel.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.assign = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = Task()
                        _elem18.read(iprot)
                        self.assign.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReportReturn')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.cancel is not None:
            oprot.writeFieldBegin('cancel', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.cancel))
            for iter19 in self.cancel:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.assign is not None:
            oprot.writeFieldBegin('assign', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.assign))
            for iter20 in self.assign:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExecutorsReturn(object):
    """
    Attributes:
     - result
     - executors

    """


    def __init__(self, result=None, executors=None,):
        self.result = result
        self.executors = executors

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.executors = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = Executor()
                        _elem26.read(iprot)
                        self.executors.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExecutorsReturn')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.executors is not None:
            oprot.writeFieldBegin('executors', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.executors))
            for iter27 in self.executors:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Compile)
Compile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'source', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'command', 'BINARY', None, ),  # 2
    (3, TType.I32, 'timeout', None, None, ),  # 3
)
all_structs.append(Execute)
Execute.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'input', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'data', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'command', 'BINARY', None, ),  # 3
    (4, TType.I32, 'timeout', None, None, ),  # 4
    (5, TType.STRING, 'standard', 'BINARY', None, ),  # 5
)
all_structs.append(Result)
Result.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'compile_output', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'compile_error', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'execute_output', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'execute_error', 'BINARY', None, ),  # 4
)
all_structs.append(Task)
Task.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user', None, None, ),  # 2
    (3, TType.STRUCT, 'compile', [Compile, None], None, ),  # 3
    (4, TType.STRUCT, 'execute', [Execute, None], None, ),  # 4
    (5, TType.STRING, 'add_time', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'done', None, None, ),  # 6
    (7, TType.I32, 'status', None, None, ),  # 7
    (8, TType.STRING, 'executor', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'report_time', 'UTF8', None, ),  # 9
    (10, TType.STRUCT, 'result', [Result, None], None, ),  # 10
)
all_structs.append(TaskBrief)
TaskBrief.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user', None, None, ),  # 2
    (3, TType.STRING, 'add_time', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'done', None, None, ),  # 4
    (5, TType.I32, 'status', None, None, ),  # 5
    (6, TType.STRING, 'executor', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'report_time', 'UTF8', None, ),  # 7
)
all_structs.append(Executor)
Executor.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hostname', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'report_time', 'UTF8', None, ),  # 3
)
all_structs.append(AddReturn)
AddReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)
all_structs.append(SearchReturn)
SearchReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.I32, 'pages', None, None, ),  # 2
    (3, TType.LIST, 'tasks', (TType.STRUCT, [TaskBrief, None], False), None, ),  # 3
)
all_structs.append(GetReturn)
GetReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.STRUCT, 'task', [Task, None], None, ),  # 2
)
all_structs.append(ReportReturn)
ReportReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.LIST, 'cancel', (TType.STRUCT, [TaskBrief, None], False), None, ),  # 2
    (3, TType.LIST, 'assign', (TType.STRUCT, [Task, None], False), None, ),  # 3
)
all_structs.append(ExecutorsReturn)
ExecutorsReturn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.LIST, 'executors', (TType.STRUCT, [Executor, None], False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
